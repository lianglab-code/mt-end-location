function [param_out, res, exitflag] = fit_mt_end(img, ...
                                                 crop_radius, ...
                                                 coarse_centers, ...
                                                 current_line, ...
                                                 varargin)
%% FIT_2D_FILAMENT_END fits images to 2d filament end
% original reference: fit_2d_filament_end.m
% ~ means ignoring some parameters

% Inputs:
% img: image series
% crop_radius: the radius of cropped image used in fitting
% coarse_centers: coarse centers
% current_line: 2*1 complex vector, start, end
% varargin: indicator of mt end missing, logical vector

% param_out:
% 1. x0
% 2. y0
% 3. sigma
% 4. theta
% 5. amplitude
% 6. baseline

% exitflag:
% 1 Function converged to a solution x.
% 2 Change in x was less than the specified tolerance.
% 3 Change in the residual was less than the specified tolerance.
% 4 Magnitude of search direction was smaller than the specified tolerance.
% 0 Number of iterations exceeded options.MaxIterations or number of function evaluations exceeded options.MaxFunctionEvaluations.
% -1 Output function terminated the algorithm.
% -2 Problem is infeasible: the bounds lb and ub are inconsistent. 

    [h, w, n] = size(img);
    
    calc_flag = logical(ones(n,1));
    if(nargin>4)
        calc_flag = varargin{1};
    end

    % cropping
    cropped = zeros(2*crop_radius+1, 2*crop_radius+1, n);
    for j = 1:n
        if(~calc_flag(j))
            continue;
        end
        x0 = round(real(coarse_centers(j)));
        y0 = round(imag(coarse_centers(j)));
        % % todelete
        % cropped(:,:,j) = img(y0-crop_radius:y0+crop_radius, ...
        %                      x0-crop_radius:x0+crop_radius, ...
        %                      j);
        % % todelete
        roi = [x0-crop_radius,...
               x0+crop_radius, ...
               y0-crop_radius,...
               y0+crop_radius];
        cropped(:,:,j) = image_crop(img(:,:,j),roi);
    end

    % fitting
    x0 = 1+crop_radius;
    y0 = 1+crop_radius;
    sigma0 = 3.0;
    theta0 = angle(current_line(2)-current_line(1));
    param_in = [x0 ...
                y0 ...
                sigma0 ...
                theta0 ...
                0.0 ...
                0.0 ];
    param_lb = [1 ...
                1 ...
                1/3*sigma0 ...
                theta0-pi/6 ...
                0.0 ...
                0.0 ];
    param_ub = [1+2*crop_radius ...
                1+2*crop_radius ...
                5/3*sigma0 ...
                theta0+pi/6 ...
                0.0 ...
                0.0 ]; 
    
    param_out = nan(n, 6);
    res = nan(n,1);
    exitflag = nan(n,1);

    [xg, yg] = meshgrid(1:(2*crop_radius+1), 1:(2*crop_radius+1));
    xdata = cat(3, xg, yg);

    %    OPTIONS = optimoptions('lsqcurvefit', ...
    %                         'Algorithm', 'levenberg-marquardt', ...
    %                         'Display','off');
    OPTIONS = optimoptions('lsqcurvefit', ...
                           'Algorithm', 'trust-region-reflective', ...
                           'Display','off');


    for j = 1:n
        if(~calc_flag(j))
            continue;
        end
        tmpimg = cropped(:,:,j);
        max_v = max(tmpimg(:));
        min_v = min(tmpimg(:));
        param_in(6) = min_v;
        param_in(5) = max_v - min_v;
        param_lb(6) = 0;
        param_ub(6) = 0.5*(max_v+min_v);
        param_lb(5) = 0.5*param_in(5);
        param_ub(5) = 1.5*param_in(5);
        % [param_out(j,1:6), res(j,1), exitflag(j,1), ~] = ...
        %     lsqcurvefit(@FilamentTip2D, ...
        %                 param_in, ...
        %                 xdata, ...
        %                 tmpimg, ...
        %                 [], ...
        %                 [], ...
        %                 OPTIONS);
        % param_out(j,1) = real(coarse_centers(j)) ...
        %     + param_out(j,1) ...
        %     - (1+crop_radius);
        % param_out(j,2) = imag(coarse_centers(j)) ...
        %     + param_out(j,2) ...
        %     - (1+crop_radius);

        [a, b, ~, c, ~] = ...
            lsqcurvefit(@FilamentTip2D, ...
                        param_in, ...
                        xdata, ...
                        tmpimg, ...
                        param_lb, ...
                        param_ub, ...
                        OPTIONS);
        res(j) = b;
        exitflag(j) = c;
        param_out(j,1:6) = a;
        param_out(j,1) = real(coarse_centers(j)) ...
            + param_out(j,1) ...
            - (1+crop_radius);
        param_out(j,2) = imag(coarse_centers(j)) ...
            + param_out(j,2) ...
            - (1+crop_radius);

    end

end
