function sp = fit_sdm(ps, sp0)
%% FIT_SDM fit 

% test data: test_oval.mat

is_closed = true;
iter_max = 1;
knots = sp0.knots;
k = sp0.order;
coefs_ol = sp0.coefs;
coefs = coefs_ol(:,1:(end-k+1)); % non-overlapped coefs
m_ol = size(coefs_ol,2); % num of overlapped control points
m = size(coefs,2); % num of non-overlapped control points
n = size(ps,2); % num of points

sp = sp0;

for ii = 1:iter_max
    % step 01: calc foot points
    [d,t] = dist_points_sp_brute(ps,sp);
    
    % step 02: calc tangent, normal, and curve value
    c1 = fnval(sp,t);
    [ct,cn,csc] = calc_sp_tnc(sp,t);
    % flag indicating to incorporate the tangent term
    d_sign = zeros(1,n);
    csn = sign([csc;csc]).*cn;
    % d_sign>0 -> p is at the same side of curvature circle
    d_sign = dot((ps-c1),csn,1);
    
    % step 03: calc values of basis function at foot point
    B_ol = zeros(n,m_ol);
    for jj = 1:m_ol
        B_ol(:,jj) = bspline_basis_val_simple(sp,jj,t);
    end
    % NOTE: IMPORTANT
    % wrap around, otherwise information is lost
    B = B_ol(:,1:m);
    B(:,1:(k-1)) = B(:,1:(k-1)) + B_ol(:,(m_ol-k+2):m_ol);
    
    % step 04: other matrices
    F = dot(ps-c1,cn,1).'; % column vector
    % used to modify tangent
    % mod_factor = ...
    %     (-d.*double(d_sign<0))...
    %     ./...
    %     ((-d.*double(d_sign<0))-abs(csc));
    mod_factor = (d./(d-abs(csc)));
    % mod_factor(isnan(mod_factor)) = 0;
    % mod_factor(isinf(mod_factor)) = 0;
    mod_factor(d_sign>=0) = 0;
    mod_factor = sqrt(mod_factor);
    ct2 = repmat(mod_factor,2,1).*ct;
    G = dot(ps-c1,ct2,1).'; % column vector
   
    % sparse begin
    % spB = sparse(B);
    % spBT = spB.';
    % spNx = sparse(diag(cn(1,:)));
    % spNy = sparse(diag(cn(2,:)));
    % spNxx = spNx*spNx;
    % spNxy = spNx*spNy;
    % spNyy = spNy*spNy;
    % spTx2 = sparse(diag(ct2(1,:)));
    % spTy2 = sparse(diag(ct2(2,:)));
    % spTxx2 = spTx2*spTx2;
    % spTxy2 = spTx2*spTy2;
    % spTyy2 = spTy2*spTy2;
    % spA = [ spBT*(spNxx+spTxx2)*spB, spBT*(spNxy+spTxy2)*spB;
    %         spBT*(spNxy+spTxy2)*spB, spBT*(spNyy+spTyy2)*spB];
    % spb = [spBT*(spNx*F+spTx2*G);spBT*(spNy*F+spTy2*G)];
    % D = spA\spb; % solving the linear system of equations
    % sparse end
    
    % dense begin
    BT = B.';
    Nx = cn(1,:);
    Ny = cn(2,:);
    Tx2 = ct2(1,:);
    Ty2 = ct2(2,:);
    Nxx_Txx2 = Nx.*Nx+Tx2.*Tx2;
    Nxy_Txy2 = Nx.*Ny+Tx2.*Ty2;
    Nyy_Tyy2 = Ny.*Ny+Ty2.*Ty2;
    block1 = bsxfun(@times,BT,Nxx_Txx2)*B;
    block2 = bsxfun(@times,BT,Nxy_Txy2)*B;
    block3 = bsxfun(@times,BT,Nyy_Tyy2)*B;
    A = [block1, block2;...
         block2, block3];
    b = [BT*(Nx.'.*F+Tx2.'.*G);...
         BT*(Ny.'.*F+Ty2.'.*G)];
    D = A\b; % solving the linear system of equations
    % dense end
   
    % debug start
    tmp = reshape(D,2,m);
    max(sqrt(dot(tmp,tmp,1)))
    % debug end
    coefs = coefs + reshape(D,2,m);
    coefs_ol = [coefs,coefs(:,1:k-1)];
    sp.coefs = coefs_ol;
    
end